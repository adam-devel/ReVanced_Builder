name: Build

on:
  workflow_dispatch:
    inputs:
      youtube-version:
        description: Youtube version to be patched
        type: string
        required: true
  pull_request:

jobs:
  download-youtube:
    name: Download youtube
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Setup node
        uses: actions/setup-node@v3
        with: { node-version: '16' }
      -
        name: Install dependencies
        run: npm --prefix ./scraper ci ./scraper
      -
        name: Scrape the download link
        id: scrape
        run: |
          cd scraper
          link=$(node . ${{ inputs.youtube-version }})
          printf "%s=%s\n" >> $GITHUB_OUTPUT dl_link $link
      -
        name: Download the apk file
        env:
          useragent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'
        run: |
          mkdir -p .tmp
          curl -sL -A '${{ env.useragent }}' -o .tmp/youtube.apk  '${{ steps.scrape.outputs.dl_link }}'
      -
        name: Upload the APK for Building
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .tmp/youtube.apk

  download-patches:
    name: Download patches
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.fetch.outputs.version }}
    steps:
      -
        name: Fetch version and download link
        id: fetch
        run: |
          # Fetch
          response=$(curl https://api.github.com/repos/revanced/revanced-patches/releases/latest \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -X 'GET' -sL | jq -c)
          # Parse and export
          printf "%s=%s\n" >> $GITHUB_OUTPUT version $(jq -r <<< "$response" .name)
          printf "%s=%s\n" >> $GITHUB_OUTPUT dl_link $(jq -r <<< "$response" .assets[1].browser_download_url)
      -
        name: Download
        env:
          useragent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'
          dl_link: ${{ steps.fetch.outputs.dl_link }}
        run: |
          mkdir -p .tmp
          curl -sL -A '${{ env.useragent }}' -o .tmp/patches.jar '${{ env.dl_link }}'
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .tmp/patches.jar

  download-patcher:
    name: Download patcher (cli)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.fetch.outputs.version }}
    steps:
      -
        name: Fetch version and download link
        id: fetch
        run: |
          # Fetch
          response=$(curl https://api.github.com/repos/j-hc/revanced-cli/releases/latest \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -X 'GET' -sL | jq -c)
          # Parse and export
          printf "%s=%s\n" >> $GITHUB_OUTPUT version $(jq -r <<< "$response" .name)
          printf "%s=%s\n" >> $GITHUB_OUTPUT dl_link $(jq -r <<< "$response" .assets[0].browser_download_url)
      -
        name: Download
        env:
          useragent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'
          dl_link: ${{ steps.fetch.outputs.dl_link }}
        run: |
          mkdir -p .tmp
          curl -sL -A '${{ env.useragent }}' -o .tmp/cli.jar '${{ env.dl_link }}'
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .tmp/cli.jar

  download-integrations:
    name: Download integrations
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.fetch.outputs.version }}
    steps:
      -
        name: Fetch version and download link
        id: fetch
        run: |
          # Fetch
          response=$(curl https://api.github.com/repos/revanced/revanced-integrations/releases/latest \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -X 'GET' -sL | jq -c)
          # Parse and export
          printf "%s=%s\n" >> $GITHUB_OUTPUT version $(jq -r <<< "$response" .name)
          printf "%s=%s\n" >> $GITHUB_OUTPUT dl_link $(jq -r <<< "$response" .assets[0].browser_download_url)
      -
        name: Download
        env:
          useragent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'
          dl_link: ${{ steps.fetch.outputs.dl_link }}
        run: |
          mkdir -p .tmp
          curl -sL -A '${{ env.useragent }}' -o .tmp/integrations.apk '${{ env.dl_link }}'
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .tmp/integrations.apk

  build:
    name: Build
    needs: [download-youtube, download-patches, download-integrations, download-patcher]
    runs-on: ubuntu-latest
    env:
      cli_version:          "${{ needs.download-patcher.outputs.version }}"
      patches_version:      "${{ needs.download-patches.outputs.version }}"
      integrations_version: "${{ needs.download-integrations.outputs.version }}"
      youtube_version:      "${{ inputs.youtube-version }}"
    steps:
      -
        name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Parse patches
        id: patches
        run: |
          patches="$(while read -r patch; do [[ -z $patch || ${patch:0:1} = '#' ]] && continue; printf -- ' -i "%s"' "$patch"; done < patches)"
          printf "%s=%s" >> $GITHUB_OUTPUT patches "$patches"
      -
        uses: actions/download-artifact@master
        with:
          name: build
          path: .tmp
      -
        name: Patch youtube
        run: |
          mkdir -p .tmp/out/
          java -jar .tmp/cli.jar \
            patch .tmp/youtube.apk \
            --patch-bundle .tmp/patches.jar \
            --exclusive ${{ steps.patches.outputs.patches }} \
            --merge .tmp/integrations.apk   \
            --rip-lib arm64-v8a \
            --rip-lib x86 \
            --rip-lib arm64-v8a \
            --out ".tmp/out/YouTube-${{ env.youtube_version }}.apk"
      -
        name: Make tag
        id: make-tag
        run: |
          tag="$(date +%F)-$(git rev-parse --short HEAD)"
          git tag "$tag"
          echo tag-name=$tag >> $GITHUB_OUTPUT
      -
        name: Generate release notes
        run: |
          env \
            envsubst < ReleaseNotesTemplate.md > .tmp/ReleaseNotes.md
      -
        name: Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: .tmp/ReleaseNotes.md
          artifacts: .tmp/out/*.apk
          tag: ${{ steps.make-tag.outputs.tag-name }}
          token: ${{ github.token }}
          allowUpdates: false
          makeLatest: true
