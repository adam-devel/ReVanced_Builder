name: Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: Youtube version
        type: string
        required: true
  pull_request:

jobs:
  get-youtube:
    name: Get youtube
    runs-on: ubuntu-latest
    steps:
      - 
        name: Setup node
        uses: actions/setup-node@v3
        with: { node-version: '16' }
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Npm CI
        run: npm --prefix ./scraper ci ./scraper
      - 
        name: Scrape data
        id: data
        run: printf "%s=%s\n" >> $GITHUB_OUTPUT dl_link $(node ./scraper/ ${{ inputs.version }})
      - 
        name: Download apk
        env:
          useragent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'
        run: |
          mkdir -p .tmp
          curl -sL -A "$useragent" -o .tmp/youtube.apk  '${{ steps.data.outputs.dl_link }}'
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: youtube
          path: .tmp

  get-revanced:
    name: Get revanced
    runs-on: ubuntu-latest
    outputs:
      cli_version:          ${{ steps.data.outputs.cli_version }}
      patches_version:      ${{ steps.data.outputs.patches_version }}
      integrations_version: ${{ steps.data.outputs.integrations_version }}
    steps:
      - 
        name: Fetch data
        id: fetch
        env: 
          revanced_endpoint: https://releases.revanced.app/tools
          github_endpoint: https://api.github.com/repos
        run: |
          revanced=$(curl $revanced_endpoint -X 'GET' -sL | jq -rc)
          jhc_cli=$(curl $github_endpoint/j-hc/revanced-cli/releases/latest \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -X 'GET' -sL | jq -rc)
          printf "%s=%s\n" >> $GITHUB_OUTPUT revanced "$revanced"
          printf "%s=%s\n" >> $GITHUB_OUTPUT jhc_cli "$jhc_cli"
      -
        name: Parse data
        id: data
        run: |
          # versions
          #printf "%s=%s\n" >> $GITHUB_OUTPUT          cli_version ${{fromJson(steps.fetch.outputs.revanced).tools[5].version}}
          printf "%s=%s\n" >> $GITHUB_OUTPUT      patches_version ${{fromJson(steps.fetch.outputs.revanced).tools[2].version}}
          printf "%s=%s\n" >> $GITHUB_OUTPUT integrations_version ${{fromJson(steps.fetch.outputs.revanced).tools[3].version}}
          printf "%s=%s\n" >> $GITHUB_OUTPUT          cli_version ${{fromJson(steps.fetch.outputs.jhc_cli).name}}

          # download urls
          #printf "%s=%s\n" >> $GITHUB_OUTPUT          cli_dl ${{fromJson(steps.fetch.outputs.revanced).tools[5].browser_download_url}}
          printf "%s=%s\n" >> $GITHUB_OUTPUT      patches_dl ${{fromJson(steps.fetch.outputs.revanced).tools[2].browser_download_url}}
          printf "%s=%s\n" >> $GITHUB_OUTPUT integrations_dl ${{fromJson(steps.fetch.outputs.revanced).tools[3].browser_download_url}}
          printf "%s=%s\n" >> $GITHUB_OUTPUT          cli_dl ${{fromJson(steps.fetch.outputs.jhc_cli).assets[0].browser_download_url}}
      -
        name: Download
        env:
          useragent: 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)'
          integrations: ${{ steps.data.outputs.integrations_dl }}
          patches: ${{ steps.data.outputs.patches_dl }}
          cli: ${{ steps.data.outputs.cli_dl }}
        run: |
          mkdir -p .tmp
          curl -sL -A "$useragent" -o .tmp/integrations.apk "$integrations" &
          curl -sL -A "$useragent" -o .tmp/patches.jar      "$patches"      &
          curl -sL -A "$useragent" -o .tmp/cli.jar          "$cli"          &
          wait
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: revanced
          path: .tmp

  build:
    name: Build
    needs: [get-revanced, get-youtube]
    runs-on: ubuntu-latest
    env: 
      cli_version:          "${{ needs.get-revanced.outputs.cli_version }}"
      patches_version:      "${{ needs.get-revanced.outputs.patches_version }}"
      integrations_version: "${{ needs.get-revanced.outputs.integrations_version }}"
      youtube_version:      "${{ inputs.version }}"
    steps:
      -
        name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Specify patches
        id: patches
        run: |
          printf '%s="%s"' includes '$(while read -r line; do [ "${line:0:1}" = "#" ] && continue; echo "-i"; echo "$line"; done < ./patches)' >> $GITHUB_OUTPUT
      -
        uses: actions/download-artifact@master
        with:
          name: youtube
          path: .tmp
      -
        uses: actions/download-artifact@master
        with:
          name: revanced
          path: .tmp
      -
        name: Patch youtube
        run: |
          mkdir -p .tmp/out/
          java                                      \
            -jar .tmp/cli.jar                       \
              --apk       .tmp/youtube.apk          \
              --bundle    .tmp/patches.jar          \
              --merge     .tmp/integrations.apk     \
              --exclusive                           \
              --rip-lib arm64-v8a                   \
              --rip-lib x86                         \
              --rip-lib arm64-v8a                   \
              ${{ steps.patches.outputs.includes }} \
              --out ".tmp/out/YouTube-${{ inputs.version }}.apk"
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: out
          path: .tmp/out
              
      -
        name: Make tag
        id: make-tag
        run: |
          tag="$(date +%F)-$(git rev-parse --short HEAD)"
          git tag "$tag"
          echo tag-name=$tag >> $GITHUB_OUTPUT
      -
        name: Generate release notes
        run: |
          env \
            envsubst < ReleaseNotesTemplate.md > .tmp/ReleaseNotes.md
      -
        name: Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: .tmp/ReleaseNotes.md
          artifacts: .tmp/out/*.apk
          tag: ${{ steps.make-tag.outputs.tag-name }}
          token: ${{ github.token }}
          allowUpdates: true
          makeLatest: true